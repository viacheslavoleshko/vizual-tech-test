openapi: 3.0.1
info:
  title: Library API
  description: >-
    This is a API for Library project. For this project, you can use the api
    token `special-key` to test the authorization     filters.
  version: 1.0.0
servers:
  - url: http://localhost:8000/api
tags:
  - name: book
paths:
  /books:
    get:
      tags:
        - book
      summary: Get all books
      description: Returns all books
      operationId: getBooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publishers'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - book
      summary: Add a new book to the store
      operationId: addBook
      requestBody:
        description: Book object that needs to be added to the store
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookForm'
            encoding:
              authors_list[]:
                style: form
                explode: true
              publishers_list[]:
                style: form
                explode: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          description: Invalid input
          content: {}
      security:
        - bearerAuth: []
  /books/{book}:
    put:
      tags:
        - book
      summary: Updates a book with form data
      operationId: updateBookWithForm
      parameters:
        - name: book
          in: path
          description: ID of book that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookForm'
            encoding:
              authors_list[]:
                style: form
                explode: true
              publishers_list[]:
                style: form
                explode: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbiden'
        '405':
          description: Invalid input
          content: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - book
      summary: Deletes a book
      operationId: deleteBook
      parameters:
        - name: book
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
            $ref: "#/components/responses/NoContentFound"
        '400':
          description: Invalid ID supplied
          content: {}
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbiden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
components:
  responses:
    NoContentFound:
      description: The resource was deleted successfully.
      content:
        application/json: {}
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbiden:
      description: Access token does not have the required scope
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
    Publisher:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    PublisherPivot:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        books:
          properties:
            items:
              $ref: '#/components/schemas/Books'
    Publishers:
      properties:
        data:
          items:
            $ref: '#/components/schemas/PublisherPivot'
          type: array
      type: object
    BookForm:
      type: object
      properties:
        name:
          type: string
        authors_list[]:
          type: array
          items:
            type: integer
            format: int64
        publishers_list[]:
          type: array
          items:
            type: integer
            format: int64
      required:
        - name
        - authors_list[]
        - publishers_list[]
    Book:
      properties:
        name:
          type: string
        id:
          type: integer
          format: int64
        authors:
          items:
            $ref: '#/components/schemas/Author'
          type: array
        publishers:
          items:
            $ref: '#/components/schemas/Publisher'
          type: array
      type: object
    Books:
      properties:
        items:
          $ref: '#/components/schemas/Book'
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - code
        - message
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
